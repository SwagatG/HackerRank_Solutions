/*
PROBLEM:
Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= a <= 5:
	2^2=4		2^3 = 8		2^4 = 16	2^5 = 32
	3^2=9		3^3 = 27	3^4 = 81	3^5 = 243
	4^2=16		4^3 = 64	4^4 = 256	4^5 = 1024
	5^2=25		5^3 = 125	5^4 = 625 	5^5 = 3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
	4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 <= a <= N and 2 <= b <= N?

Input Format 
Input contains an integer N.

Output Format 
Print the answer corresponding to the test case.

Constraints
2 <= N <= 10^5

Sample Input
5

Sample Output
15
*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <cstring>

using namespace std;

const int MAXN = 3e6+100;
typedef long long ll;

int isTest[MAXN];
long long expVal[50];

int main() {
    int n;
    scanf("%d",&n);
	memset(isTest, 0, sizeof isTest);
    int maxExp = log2(n * 1.0);
    for (int i = 1; i <= maxExp; i++){
        ll sum = 0, test = 2 * i;
        for (int j = 1; j < n; j++){
            if (!isTest[test]){
                sum ++;
                isTest[test] = 1;
            }
            test += i;
        }
        expVal[i] = sum;
    }
    memset(isTest, 0, sizeof isTest);
    ll answer = 0;
    int currExp;
    double temp;
    for (ll i = 2; i <= n; i++){
        if(!isTest[i]){
            temp = log(n*1.0)/log(i*1.0);
            currExp = (int) (temp+0.00001);
            for (ll j = 1; j <= currExp; j++){
                answer += expVal[j];
            }
            for (ll j = i * i; j <= n; j *= i){ //prevent any exponents of i from getting added in as the above portion accounted for them
                isTest[j] = 1;
            }
        }
    }
    cout << answer << endl;
    
    return 0;
}
